import edu.wpi.first.wpilib.versioning.ReleaseType

plugins {
    id 'java'
    id 'application'
    id 'checkstyle'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
    id 'maven-publish'
    id 'edu.wpi.first.wpilib.versioning.WPILibVersioningPlugin' version '1.6'
    id 'com.github.ben-manes.versions' version '0.15.0'
}

apply plugin: "pmd"
apply plugin: "jacoco"

mainClassName = 'edu.wpi.first.outlineviewer.OutlineViewer'

publishing {
    publications {
        maven(MavenPublication) {
            artifact(shadowJar) {
                classifier null
            }
            groupId 'edu.wpi.first.wpilib.networktables'
            artifactId 'OutlineViewer'
            version WPILibVersion.version
        }
    }
}

checkstyle {
    configFile = new File(rootDir, "checkstyle.xml")
    toolVersion = '6.19'
}

pmd {
    consoleOutput = true
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSetFiles = files(new File(rootDir, "pmd-ruleset.xml"))
    ruleSets = []
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'edu.wpi.first.ntcore:ntcore-java:+'
    compile 'edu.wpi.first.wpiutil:wpiutil-java:+'
    compile "org.controlsfx:controlsfx:+"
    compile group: 'com.google.guava', name: 'guava', version: '21.0'

    runtime 'edu.wpi.first.ntcore:ntcore-jni:+:all'

    testCompile "junit:junit:+"
    testCompile "org.testfx:testfx-core:4.0.+"
    testCompile "org.testfx:testfx-junit:4.0.+"
    testCompile group: 'com.google.guava', name: 'guava-testlib', version: '21.0'

    testRuntime group: 'org.testfx', name: 'openjfx-monocle', version: '8u76-b04'
}

test {
    testLogging {
        if (project.hasProperty('logTests') || project.hasProperty('jenkinsBuild')) {
            events "started", "passed", "skipped", "failed"
        } else {
            events "failed"
        }
        exceptionFormat "full"
        showStandardStreams = true
    }
}

/*
 * Allows you to run the UI tests in headless mode by calling gradle with the -Pheadless argument
 */
if (project.hasProperty('jenkinsBuild') || project.hasProperty('headless')) {
    println "Running UI Tests Headless"
    test {
        jvmArgs = ['-Djava.awt.headless=true', '-Dtestfx.robot=glass', '-Dtestfx.headless=true', '-Dprism.order=sw', '-Dprism.text=t2k']
    }
}

// Ensure that the WPILibVersioningPlugin is setup by setting the release type, if releaseType wasn't
// already specified on the command line
if (!hasProperty('releaseType')) {
    WPILibVersion {
        releaseType = ReleaseType.DEV
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.0.2'
}
